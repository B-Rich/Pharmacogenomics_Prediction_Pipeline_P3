# Top-level data dir
prefix: example_data

# List of feature sets to use while training. Anything selected here must be
# configured below.
features_to_use: [go, normed_counts, zscores, msigdb, cpdb, exome_variants, cnv]


# Explicitly defines path to Rscript to avoid conflict with other existing
# installations
Rscript: Rscript

# Each set of features:
#   - has a unique name that can be used in the "features_to_use" list
#
#   - has one or more output files, which must be of the general format:
#       - rows = features
#       - columns = samples
#
#   - has a snakefile responsible for creating the output file.
#       - paths in these snakefiles should be relative to the runall.snakefile
#         since they are included verbatim.
#       - interdependencies between feature snakefiles can be handled by using
#         the snakemake directive "include:"
features:
    cnv:
        snakefile: features/cnv.snakefile
        output:
            clusters: "{prefix}/cleaned/cnv/cluster_scores.tab"
            max_gene: "{prefix}/cleaned/cnv/cnv_gene_max_scores.tab"
            longest_gene: "{prefix}/cleaned/cnv/cnv_gene_longest_overlap_scores.tab"

    exome_variants:
        snakefile: features/variants.snakefile
        output:
            by_gene: "{prefix}/cleaned/exome_variants/exome_variants_by_gene.tab"

    msigdb:
        snakefile: features/msigdb.snakefile
        output:
            zscores: "{prefix}/cleaned/msigdb/msigdb_zscores.csv"
            variants: "{prefix}/cleaned/msigdb/msigdb_variants.csv"
    go:
        snakefile: features/gene_ontology.snakefile
        output:
            zscores: "{prefix}/cleaned/go/go_zscores.csv"
            variants: "{prefix}/cleaned/go/go_variants.csv"

    cpdb:
        snakefile: features/cpdb.snakefile
        output:
            zscores: "{prefix}/cleaned/consensus_pathway/cpdb_zscores.csv"
            variants: "{prefix}/cleaned/consensus_pathway/cpdb_variants.csv"

    normed_counts:
        snakefile: features/normed_counts.snakefile
        output:
            normed_counts: "{prefix}/cleaned/rnaseq_expression/counts_matrix_normalized.csv"

    zscores:
        snakefile: features/zscores.snakefile
        output:
            zscores: "{prefix}/cleaned/rnaseq_expression/zscores.csv"
            zscore_estimates: "{prefix}/cleaned/rnaseq_expression/zscore_estimates.csv"

run_info:
    run_1:
        feature_filter: "filterfuncs.run1"

        # The pipeline will create a NxM matrix, where N is the number of drugs
        # listed in `response_list`, M is the number of samples listed in the
        # `sample_list`.  The values in the matrix will be extracted from the
        # column called "response_column" from the files matching the template
        # in "response_template"
        response_list: "SIDs.txt"
        sample_list: "celllines.txt"
        response_template: "{prefix}/processed/drug_response/{sample}_drugResponse.tab"
        response_column: "DATA0"
